# -*- coding: utf-8 -*-
"""image classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lz_UqOb2KfPC2asskAicqvObloP0LBii
"""

from scipy.misc import imread
import numpy as np
import pandas as pd
import os
import keras
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Conv2D,MaxPooling2D,Flatten,Activation,BatchNormalization, Dense
from keras.optimizers import Adam,SGD

from google.colab import drive

# This will prompt for authorization.
drive.mount('/content/drive')

datagen=ImageDataGenerator()
img=datagen.flow_from_directory('drive/My Drive/train1')

img_test=datagen.flow_from_directory('drive/My Drive/test')

model=Sequential()
model.add(Conv2D(16,3, activation='relu',input_shape=(256,256,3)))
model.add(Conv2D(32,3, activation='relu'))
model.add(Conv2D(32,3, activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(BatchNormalization())
model.add(Conv2D(48,3, activation='relu'))
model.add(Conv2D(48,3, activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(BatchNormalization())
model.add(Conv2D(64,3, activation='relu'))
model.add(Conv2D(64,3, activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(BatchNormalization())
model.add(Conv2D(72,3, activation='relu'))
model.add(Conv2D(72,3, activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Conv2D(72,3, activation='relu'))
model.add(Conv2D(72,3, activation='relu'))
model.add(Conv2D(80,3, activation='relu'))
model.add(Conv2D(3,6))
model.add(Flatten())
model.add(Activation('softmax'))

model.summary()

model.compile(optimizer='adadelta',loss='categorical_crossentropy',metrics=['accuracy'])

m=model.fit_generator(img, epochs=10,steps_per_epoch=500,validation_data=img_test,validation_steps=640)

scores = model.evaluate_generator(img_test, steps=1000, verbose=1)

print("Accuracy is %s" %(scores[1]*100))

from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report
from sklearn import metrics
Y_pred = model.predict_generator(img_test, steps=5)
y_pred = np.argmax(Y_pred,axis=1)

print("Confusion Metrix")
print(metrics.confusion_matrix(img_test.classes, y_pred))
print("Classification Report")
print(metrics.classification_report(img_test.classes, y_pred))

from keras.models import model_from_yaml

model_yaml = model.to_yaml()
with open("model.yaml", "w") as yaml_file:
  yaml_file.write(model_yaml)
model.save_weights("model.h5")
print("Saved model")